// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2021 00:24:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CA6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CA6_vlg_sample_tst(
	branchoffset,
	clk,
	four,
	jump,
	jumpaddress,
	one,
	rst,
	two,
	x,
	zero,
	sampler_tx
);
input [15:0] branchoffset;
input  clk;
input [31:0] four;
input [1:0] jump;
input [25:0] jumpaddress;
input [15:0] one;
input  rst;
input [1:0] two;
input [31:0] x;
input [15:0] zero;
output sampler_tx;

reg sample;
time current_time;
always @(branchoffset or clk or four or jump or jumpaddress or one or rst or two or x or zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CA6_vlg_check_tst (
	val,
	sampler_rx
);
input [31:0] val;
input sampler_rx;

reg [31:0] val_expected;

reg [31:0] val_prev;

reg [31:0] val_expected_prev;

reg [31:0] last_val_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	val_prev = val;
end

// update expected /o prevs

always @(trigger)
begin
	val_expected_prev = val_expected;
end


// expected val[ 31 ]
initial
begin
	val_expected[31] = 1'bX;
end 
// expected val[ 30 ]
initial
begin
	val_expected[30] = 1'bX;
end 
// expected val[ 29 ]
initial
begin
	val_expected[29] = 1'bX;
end 
// expected val[ 28 ]
initial
begin
	val_expected[28] = 1'bX;
end 
// expected val[ 27 ]
initial
begin
	val_expected[27] = 1'bX;
end 
// expected val[ 26 ]
initial
begin
	val_expected[26] = 1'bX;
end 
// expected val[ 25 ]
initial
begin
	val_expected[25] = 1'bX;
end 
// expected val[ 24 ]
initial
begin
	val_expected[24] = 1'bX;
end 
// expected val[ 23 ]
initial
begin
	val_expected[23] = 1'bX;
end 
// expected val[ 22 ]
initial
begin
	val_expected[22] = 1'bX;
end 
// expected val[ 21 ]
initial
begin
	val_expected[21] = 1'bX;
end 
// expected val[ 20 ]
initial
begin
	val_expected[20] = 1'bX;
end 
// expected val[ 19 ]
initial
begin
	val_expected[19] = 1'bX;
end 
// expected val[ 18 ]
initial
begin
	val_expected[18] = 1'bX;
end 
// expected val[ 17 ]
initial
begin
	val_expected[17] = 1'bX;
end 
// expected val[ 16 ]
initial
begin
	val_expected[16] = 1'bX;
end 
// expected val[ 15 ]
initial
begin
	val_expected[15] = 1'bX;
end 
// expected val[ 14 ]
initial
begin
	val_expected[14] = 1'bX;
end 
// expected val[ 13 ]
initial
begin
	val_expected[13] = 1'bX;
end 
// expected val[ 12 ]
initial
begin
	val_expected[12] = 1'bX;
end 
// expected val[ 11 ]
initial
begin
	val_expected[11] = 1'bX;
end 
// expected val[ 10 ]
initial
begin
	val_expected[10] = 1'bX;
end 
// expected val[ 9 ]
initial
begin
	val_expected[9] = 1'bX;
end 
// expected val[ 8 ]
initial
begin
	val_expected[8] = 1'bX;
end 
// expected val[ 7 ]
initial
begin
	val_expected[7] = 1'bX;
end 
// expected val[ 6 ]
initial
begin
	val_expected[6] = 1'bX;
end 
// expected val[ 5 ]
initial
begin
	val_expected[5] = 1'bX;
end 
// expected val[ 4 ]
initial
begin
	val_expected[4] = 1'bX;
end 
// expected val[ 3 ]
initial
begin
	val_expected[3] = 1'bX;
end 
// expected val[ 2 ]
initial
begin
	val_expected[2] = 1'bX;
end 
// expected val[ 1 ]
initial
begin
	val_expected[1] = 1'bX;
end 
// expected val[ 0 ]
initial
begin
	val_expected[0] = 1'bX;
end 
// generate trigger
always @(val_expected or val)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected val = %b | ",val_expected_prev);
	$display("| real val = %b | ",val_prev);
`endif
	if (
		( val_expected_prev[0] !== 1'bx ) && ( val_prev[0] !== val_expected_prev[0] )
		&& ((val_expected_prev[0] !== last_val_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[0] = val_expected_prev[0];
	end
	if (
		( val_expected_prev[1] !== 1'bx ) && ( val_prev[1] !== val_expected_prev[1] )
		&& ((val_expected_prev[1] !== last_val_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[1] = val_expected_prev[1];
	end
	if (
		( val_expected_prev[2] !== 1'bx ) && ( val_prev[2] !== val_expected_prev[2] )
		&& ((val_expected_prev[2] !== last_val_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[2] = val_expected_prev[2];
	end
	if (
		( val_expected_prev[3] !== 1'bx ) && ( val_prev[3] !== val_expected_prev[3] )
		&& ((val_expected_prev[3] !== last_val_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[3] = val_expected_prev[3];
	end
	if (
		( val_expected_prev[4] !== 1'bx ) && ( val_prev[4] !== val_expected_prev[4] )
		&& ((val_expected_prev[4] !== last_val_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[4] = val_expected_prev[4];
	end
	if (
		( val_expected_prev[5] !== 1'bx ) && ( val_prev[5] !== val_expected_prev[5] )
		&& ((val_expected_prev[5] !== last_val_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[5] = val_expected_prev[5];
	end
	if (
		( val_expected_prev[6] !== 1'bx ) && ( val_prev[6] !== val_expected_prev[6] )
		&& ((val_expected_prev[6] !== last_val_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[6] = val_expected_prev[6];
	end
	if (
		( val_expected_prev[7] !== 1'bx ) && ( val_prev[7] !== val_expected_prev[7] )
		&& ((val_expected_prev[7] !== last_val_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[7] = val_expected_prev[7];
	end
	if (
		( val_expected_prev[8] !== 1'bx ) && ( val_prev[8] !== val_expected_prev[8] )
		&& ((val_expected_prev[8] !== last_val_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[8] = val_expected_prev[8];
	end
	if (
		( val_expected_prev[9] !== 1'bx ) && ( val_prev[9] !== val_expected_prev[9] )
		&& ((val_expected_prev[9] !== last_val_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[9] = val_expected_prev[9];
	end
	if (
		( val_expected_prev[10] !== 1'bx ) && ( val_prev[10] !== val_expected_prev[10] )
		&& ((val_expected_prev[10] !== last_val_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[10] = val_expected_prev[10];
	end
	if (
		( val_expected_prev[11] !== 1'bx ) && ( val_prev[11] !== val_expected_prev[11] )
		&& ((val_expected_prev[11] !== last_val_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[11] = val_expected_prev[11];
	end
	if (
		( val_expected_prev[12] !== 1'bx ) && ( val_prev[12] !== val_expected_prev[12] )
		&& ((val_expected_prev[12] !== last_val_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[12] = val_expected_prev[12];
	end
	if (
		( val_expected_prev[13] !== 1'bx ) && ( val_prev[13] !== val_expected_prev[13] )
		&& ((val_expected_prev[13] !== last_val_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[13] = val_expected_prev[13];
	end
	if (
		( val_expected_prev[14] !== 1'bx ) && ( val_prev[14] !== val_expected_prev[14] )
		&& ((val_expected_prev[14] !== last_val_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[14] = val_expected_prev[14];
	end
	if (
		( val_expected_prev[15] !== 1'bx ) && ( val_prev[15] !== val_expected_prev[15] )
		&& ((val_expected_prev[15] !== last_val_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[15] = val_expected_prev[15];
	end
	if (
		( val_expected_prev[16] !== 1'bx ) && ( val_prev[16] !== val_expected_prev[16] )
		&& ((val_expected_prev[16] !== last_val_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[16] = val_expected_prev[16];
	end
	if (
		( val_expected_prev[17] !== 1'bx ) && ( val_prev[17] !== val_expected_prev[17] )
		&& ((val_expected_prev[17] !== last_val_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[17] = val_expected_prev[17];
	end
	if (
		( val_expected_prev[18] !== 1'bx ) && ( val_prev[18] !== val_expected_prev[18] )
		&& ((val_expected_prev[18] !== last_val_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[18] = val_expected_prev[18];
	end
	if (
		( val_expected_prev[19] !== 1'bx ) && ( val_prev[19] !== val_expected_prev[19] )
		&& ((val_expected_prev[19] !== last_val_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[19] = val_expected_prev[19];
	end
	if (
		( val_expected_prev[20] !== 1'bx ) && ( val_prev[20] !== val_expected_prev[20] )
		&& ((val_expected_prev[20] !== last_val_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[20] = val_expected_prev[20];
	end
	if (
		( val_expected_prev[21] !== 1'bx ) && ( val_prev[21] !== val_expected_prev[21] )
		&& ((val_expected_prev[21] !== last_val_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[21] = val_expected_prev[21];
	end
	if (
		( val_expected_prev[22] !== 1'bx ) && ( val_prev[22] !== val_expected_prev[22] )
		&& ((val_expected_prev[22] !== last_val_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[22] = val_expected_prev[22];
	end
	if (
		( val_expected_prev[23] !== 1'bx ) && ( val_prev[23] !== val_expected_prev[23] )
		&& ((val_expected_prev[23] !== last_val_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[23] = val_expected_prev[23];
	end
	if (
		( val_expected_prev[24] !== 1'bx ) && ( val_prev[24] !== val_expected_prev[24] )
		&& ((val_expected_prev[24] !== last_val_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[24] = val_expected_prev[24];
	end
	if (
		( val_expected_prev[25] !== 1'bx ) && ( val_prev[25] !== val_expected_prev[25] )
		&& ((val_expected_prev[25] !== last_val_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[25] = val_expected_prev[25];
	end
	if (
		( val_expected_prev[26] !== 1'bx ) && ( val_prev[26] !== val_expected_prev[26] )
		&& ((val_expected_prev[26] !== last_val_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[26] = val_expected_prev[26];
	end
	if (
		( val_expected_prev[27] !== 1'bx ) && ( val_prev[27] !== val_expected_prev[27] )
		&& ((val_expected_prev[27] !== last_val_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[27] = val_expected_prev[27];
	end
	if (
		( val_expected_prev[28] !== 1'bx ) && ( val_prev[28] !== val_expected_prev[28] )
		&& ((val_expected_prev[28] !== last_val_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[28] = val_expected_prev[28];
	end
	if (
		( val_expected_prev[29] !== 1'bx ) && ( val_prev[29] !== val_expected_prev[29] )
		&& ((val_expected_prev[29] !== last_val_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[29] = val_expected_prev[29];
	end
	if (
		( val_expected_prev[30] !== 1'bx ) && ( val_prev[30] !== val_expected_prev[30] )
		&& ((val_expected_prev[30] !== last_val_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[30] = val_expected_prev[30];
	end
	if (
		( val_expected_prev[31] !== 1'bx ) && ( val_prev[31] !== val_expected_prev[31] )
		&& ((val_expected_prev[31] !== last_val_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port val[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", val_expected_prev);
		$display ("     Real value = %b", val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_val_exp[31] = val_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CA6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] branchoffset;
reg clk;
reg [31:0] four;
reg [1:0] jump;
reg [25:0] jumpaddress;
reg [15:0] one;
reg rst;
reg [1:0] two;
reg [31:0] x;
reg [15:0] zero;
// wires                                               
wire [31:0] val;

wire sampler;                             

// assign statements (if any)                          
CA6 i1 (
// port map - connection between master ports and signals/registers   
	.branchoffset(branchoffset),
	.clk(clk),
	.four(four),
	.jump(jump),
	.jumpaddress(jumpaddress),
	.one(one),
	.rst(rst),
	.two(two),
	.val(val),
	.x(x),
	.zero(zero)
);
// x[ 31 ]
initial
begin
	x[31] = 1'bX;
end 
// x[ 30 ]
initial
begin
	x[30] = 1'bX;
end 
// x[ 29 ]
initial
begin
	x[29] = 1'bX;
end 
// x[ 28 ]
initial
begin
	x[28] = 1'bX;
end 
// x[ 27 ]
initial
begin
	x[27] = 1'bX;
end 
// x[ 26 ]
initial
begin
	x[26] = 1'bX;
end 
// x[ 25 ]
initial
begin
	x[25] = 1'bX;
end 
// x[ 24 ]
initial
begin
	x[24] = 1'bX;
end 
// x[ 23 ]
initial
begin
	x[23] = 1'bX;
end 
// x[ 22 ]
initial
begin
	x[22] = 1'bX;
end 
// x[ 21 ]
initial
begin
	x[21] = 1'bX;
end 
// x[ 20 ]
initial
begin
	x[20] = 1'bX;
end 
// x[ 19 ]
initial
begin
	x[19] = 1'bX;
end 
// x[ 18 ]
initial
begin
	x[18] = 1'bX;
end 
// x[ 17 ]
initial
begin
	x[17] = 1'bX;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'bX;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'bX;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'bX;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'bX;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'bX;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'bX;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'bX;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'bX;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'bX;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'bX;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'bX;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'bX;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'bX;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'bX;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'bX;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'bX;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'bX;
end 
// zero[ 15 ]
initial
begin
	zero[15] = 1'b0;
end 
// zero[ 14 ]
initial
begin
	zero[14] = 1'b0;
end 
// zero[ 13 ]
initial
begin
	zero[13] = 1'b0;
end 
// zero[ 12 ]
initial
begin
	zero[12] = 1'b0;
end 
// zero[ 11 ]
initial
begin
	zero[11] = 1'b0;
end 
// zero[ 10 ]
initial
begin
	zero[10] = 1'b0;
end 
// zero[ 9 ]
initial
begin
	zero[9] = 1'b0;
end 
// zero[ 8 ]
initial
begin
	zero[8] = 1'b0;
end 
// zero[ 7 ]
initial
begin
	zero[7] = 1'b0;
end 
// zero[ 6 ]
initial
begin
	zero[6] = 1'b0;
end 
// zero[ 5 ]
initial
begin
	zero[5] = 1'b0;
end 
// zero[ 4 ]
initial
begin
	zero[4] = 1'b0;
end 
// zero[ 3 ]
initial
begin
	zero[3] = 1'b0;
end 
// zero[ 2 ]
initial
begin
	zero[2] = 1'b0;
end 
// zero[ 1 ]
initial
begin
	zero[1] = 1'b0;
end 
// zero[ 0 ]
initial
begin
	zero[0] = 1'b0;
end 
// one[ 15 ]
initial
begin
	one[15] = 1'b1;
end 
// one[ 14 ]
initial
begin
	one[14] = 1'b1;
end 
// one[ 13 ]
initial
begin
	one[13] = 1'b1;
end 
// one[ 12 ]
initial
begin
	one[12] = 1'b1;
end 
// one[ 11 ]
initial
begin
	one[11] = 1'b1;
end 
// one[ 10 ]
initial
begin
	one[10] = 1'b1;
end 
// one[ 9 ]
initial
begin
	one[9] = 1'b1;
end 
// one[ 8 ]
initial
begin
	one[8] = 1'b1;
end 
// one[ 7 ]
initial
begin
	one[7] = 1'b1;
end 
// one[ 6 ]
initial
begin
	one[6] = 1'b1;
end 
// one[ 5 ]
initial
begin
	one[5] = 1'b1;
end 
// one[ 4 ]
initial
begin
	one[4] = 1'b1;
end 
// one[ 3 ]
initial
begin
	one[3] = 1'b1;
end 
// one[ 2 ]
initial
begin
	one[2] = 1'b1;
end 
// one[ 1 ]
initial
begin
	one[1] = 1'b1;
end 
// one[ 0 ]
initial
begin
	one[0] = 1'b1;
end 
// four[ 31 ]
initial
begin
	four[31] = 1'b0;
end 
// four[ 30 ]
initial
begin
	four[30] = 1'b0;
end 
// four[ 29 ]
initial
begin
	four[29] = 1'b0;
end 
// four[ 28 ]
initial
begin
	four[28] = 1'b0;
end 
// four[ 27 ]
initial
begin
	four[27] = 1'b0;
end 
// four[ 26 ]
initial
begin
	four[26] = 1'b0;
end 
// four[ 25 ]
initial
begin
	four[25] = 1'b0;
end 
// four[ 24 ]
initial
begin
	four[24] = 1'b0;
end 
// four[ 23 ]
initial
begin
	four[23] = 1'b0;
end 
// four[ 22 ]
initial
begin
	four[22] = 1'b0;
end 
// four[ 21 ]
initial
begin
	four[21] = 1'b0;
end 
// four[ 20 ]
initial
begin
	four[20] = 1'b0;
end 
// four[ 19 ]
initial
begin
	four[19] = 1'b0;
end 
// four[ 18 ]
initial
begin
	four[18] = 1'b0;
end 
// four[ 17 ]
initial
begin
	four[17] = 1'b0;
end 
// four[ 16 ]
initial
begin
	four[16] = 1'b0;
end 
// four[ 15 ]
initial
begin
	four[15] = 1'b0;
end 
// four[ 14 ]
initial
begin
	four[14] = 1'b0;
end 
// four[ 13 ]
initial
begin
	four[13] = 1'b0;
end 
// four[ 12 ]
initial
begin
	four[12] = 1'b0;
end 
// four[ 11 ]
initial
begin
	four[11] = 1'b0;
end 
// four[ 10 ]
initial
begin
	four[10] = 1'b0;
end 
// four[ 9 ]
initial
begin
	four[9] = 1'b0;
end 
// four[ 8 ]
initial
begin
	four[8] = 1'b0;
end 
// four[ 7 ]
initial
begin
	four[7] = 1'b0;
end 
// four[ 6 ]
initial
begin
	four[6] = 1'b0;
end 
// four[ 5 ]
initial
begin
	four[5] = 1'b0;
end 
// four[ 4 ]
initial
begin
	four[4] = 1'b0;
end 
// four[ 3 ]
initial
begin
	four[3] = 1'b0;
end 
// four[ 2 ]
initial
begin
	four[2] = 1'b1;
end 
// four[ 1 ]
initial
begin
	four[1] = 1'b0;
end 
// four[ 0 ]
initial
begin
	four[0] = 1'b0;
end 
// two[ 1 ]
initial
begin
	two[1] = 1'b1;
end 
// two[ 0 ]
initial
begin
	two[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #500000 1'b0;
end 
// jump[ 1 ]
initial
begin
	jump[1] = 1'b1;
	jump[1] = #100000 1'b0;
	jump[1] = #100000 1'b1;
	jump[1] = #50000 1'b0;
	jump[1] = #50000 1'b1;
	jump[1] = #200000 1'b0;
	jump[1] = #200000 1'b1;
	jump[1] = #100000 1'b0;
	jump[1] = #50000 1'b1;
end 
// jump[ 0 ]
initial
begin
	jump[0] = 1'b1;
	jump[0] = #100000 1'b0;
	jump[0] = #50000 1'b1;
	jump[0] = #100000 1'b0;
	jump[0] = #50000 1'b1;
	jump[0] = #100000 1'b0;
	jump[0] = #100000 1'b1;
	jump[0] = #50000 1'b0;
	jump[0] = #50000 1'b1;
	jump[0] = #50000 1'b0;
	jump[0] = #50000 1'b1;
	jump[0] = #50000 1'b0;
	jump[0] = #100000 1'b1;
end 
// branchoffset[ 15 ]
initial
begin
	branchoffset[15] = 1'b0;
end 
// branchoffset[ 14 ]
initial
begin
	branchoffset[14] = 1'b0;
end 
// branchoffset[ 13 ]
initial
begin
	branchoffset[13] = 1'b0;
end 
// branchoffset[ 12 ]
initial
begin
	branchoffset[12] = 1'b0;
end 
// branchoffset[ 11 ]
initial
begin
	branchoffset[11] = 1'b0;
end 
// branchoffset[ 10 ]
initial
begin
	branchoffset[10] = 1'b0;
end 
// branchoffset[ 9 ]
initial
begin
	branchoffset[9] = 1'b0;
end 
// branchoffset[ 8 ]
initial
begin
	branchoffset[8] = 1'b0;
end 
// branchoffset[ 7 ]
initial
begin
	branchoffset[7] = 1'b0;
end 
// branchoffset[ 6 ]
initial
begin
	branchoffset[6] = 1'b0;
end 
// branchoffset[ 5 ]
initial
begin
	branchoffset[5] = 1'b0;
end 
// branchoffset[ 4 ]
initial
begin
	branchoffset[4] = 1'b0;
end 
// branchoffset[ 3 ]
initial
begin
	branchoffset[3] = 1'b0;
end 
// branchoffset[ 2 ]
initial
begin
	branchoffset[2] = 1'b0;
end 
// branchoffset[ 1 ]
initial
begin
	branchoffset[1] = 1'b1;
end 
// branchoffset[ 0 ]
initial
begin
	branchoffset[0] = 1'b0;
end 
// jumpaddress[ 25 ]
initial
begin
	jumpaddress[25] = 1'b0;
end 
// jumpaddress[ 24 ]
initial
begin
	jumpaddress[24] = 1'b0;
end 
// jumpaddress[ 23 ]
initial
begin
	jumpaddress[23] = 1'b0;
end 
// jumpaddress[ 22 ]
initial
begin
	jumpaddress[22] = 1'b0;
end 
// jumpaddress[ 21 ]
initial
begin
	jumpaddress[21] = 1'b0;
end 
// jumpaddress[ 20 ]
initial
begin
	jumpaddress[20] = 1'b0;
end 
// jumpaddress[ 19 ]
initial
begin
	jumpaddress[19] = 1'b0;
end 
// jumpaddress[ 18 ]
initial
begin
	jumpaddress[18] = 1'b0;
end 
// jumpaddress[ 17 ]
initial
begin
	jumpaddress[17] = 1'b0;
end 
// jumpaddress[ 16 ]
initial
begin
	jumpaddress[16] = 1'b0;
end 
// jumpaddress[ 15 ]
initial
begin
	jumpaddress[15] = 1'b0;
end 
// jumpaddress[ 14 ]
initial
begin
	jumpaddress[14] = 1'b0;
end 
// jumpaddress[ 13 ]
initial
begin
	jumpaddress[13] = 1'b0;
end 
// jumpaddress[ 12 ]
initial
begin
	jumpaddress[12] = 1'b0;
end 
// jumpaddress[ 11 ]
initial
begin
	jumpaddress[11] = 1'b0;
end 
// jumpaddress[ 10 ]
initial
begin
	jumpaddress[10] = 1'b0;
end 
// jumpaddress[ 9 ]
initial
begin
	jumpaddress[9] = 1'b0;
end 
// jumpaddress[ 8 ]
initial
begin
	jumpaddress[8] = 1'b0;
end 
// jumpaddress[ 7 ]
initial
begin
	jumpaddress[7] = 1'b0;
end 
// jumpaddress[ 6 ]
initial
begin
	jumpaddress[6] = 1'b0;
end 
// jumpaddress[ 5 ]
initial
begin
	jumpaddress[5] = 1'b0;
end 
// jumpaddress[ 4 ]
initial
begin
	jumpaddress[4] = 1'b1;
end 
// jumpaddress[ 3 ]
initial
begin
	jumpaddress[3] = 1'b0;
end 
// jumpaddress[ 2 ]
initial
begin
	jumpaddress[2] = 1'b0;
end 
// jumpaddress[ 1 ]
initial
begin
	jumpaddress[1] = 1'b0;
end 
// jumpaddress[ 0 ]
initial
begin
	jumpaddress[0] = 1'b0;
end 

CA6_vlg_sample_tst tb_sample (
	.branchoffset(branchoffset),
	.clk(clk),
	.four(four),
	.jump(jump),
	.jumpaddress(jumpaddress),
	.one(one),
	.rst(rst),
	.two(two),
	.x(x),
	.zero(zero),
	.sampler_tx(sampler)
);

CA6_vlg_check_tst tb_out(
	.val(val),
	.sampler_rx(sampler)
);
endmodule

