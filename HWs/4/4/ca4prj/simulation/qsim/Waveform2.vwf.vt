// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2021 18:19:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          caprj4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module caprj4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLR;
reg [31:0] D;
reg [31:0] GR;
reg REGWR;
reg [4:0] RR1;
reg [4:0] RR2;
reg [4:0] WR;
// wires                                               
wire [31:0] RD1;
wire [31:0] RD2;

// assign statements (if any)                          
caprj4 i1 (
// port map - connection between master ports and signals/registers   
	.CLR(CLR),
	.D(D),
	.GR(GR),
	.RD1(RD1),
	.RD2(RD2),
	.REGWR(REGWR),
	.RR1(RR1),
	.RR2(RR2),
	.WR(WR)
);
initial 
begin 
#1000000 $finish;
end 

// CLR
initial
begin
	CLR = 1'b0;
end 
// D[ 31 ]
initial
begin
	D[31] = 1'b0;
end 
// D[ 30 ]
initial
begin
	D[30] = 1'b0;
end 
// D[ 29 ]
initial
begin
	D[29] = 1'b0;
end 
// D[ 28 ]
initial
begin
	D[28] = 1'b0;
end 
// D[ 27 ]
initial
begin
	D[27] = 1'b0;
end 
// D[ 26 ]
initial
begin
	D[26] = 1'b0;
end 
// D[ 25 ]
initial
begin
	D[25] = 1'b0;
end 
// D[ 24 ]
initial
begin
	D[24] = 1'b0;
end 
// D[ 23 ]
initial
begin
	D[23] = 1'b0;
end 
// D[ 22 ]
initial
begin
	D[22] = 1'b0;
end 
// D[ 21 ]
initial
begin
	D[21] = 1'b0;
end 
// D[ 20 ]
initial
begin
	D[20] = 1'b0;
end 
// D[ 19 ]
initial
begin
	D[19] = 1'b0;
end 
// D[ 18 ]
initial
begin
	D[18] = 1'b0;
end 
// D[ 17 ]
initial
begin
	D[17] = 1'b0;
end 
// D[ 16 ]
initial
begin
	D[16] = 1'b0;
end 
// D[ 15 ]
initial
begin
	D[15] = 1'b0;
end 
// D[ 14 ]
initial
begin
	D[14] = 1'b0;
end 
// D[ 13 ]
initial
begin
	D[13] = 1'b0;
end 
// D[ 12 ]
initial
begin
	D[12] = 1'b0;
end 
// D[ 11 ]
initial
begin
	D[11] = 1'b0;
end 
// D[ 10 ]
initial
begin
	D[10] = 1'b0;
end 
// D[ 9 ]
initial
begin
	D[9] = 1'b0;
end 
// D[ 8 ]
initial
begin
	D[8] = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
end 
// GR[ 31 ]
initial
begin
	GR[31] = 1'b0;
end 
// GR[ 30 ]
initial
begin
	GR[30] = 1'b0;
end 
// GR[ 29 ]
initial
begin
	GR[29] = 1'b0;
end 
// GR[ 28 ]
initial
begin
	GR[28] = 1'b0;
end 
// GR[ 27 ]
initial
begin
	GR[27] = 1'b0;
end 
// GR[ 26 ]
initial
begin
	GR[26] = 1'b0;
end 
// GR[ 25 ]
initial
begin
	GR[25] = 1'b0;
end 
// GR[ 24 ]
initial
begin
	GR[24] = 1'b0;
end 
// GR[ 23 ]
initial
begin
	GR[23] = 1'b0;
end 
// GR[ 22 ]
initial
begin
	GR[22] = 1'b0;
end 
// GR[ 21 ]
initial
begin
	GR[21] = 1'b0;
end 
// GR[ 20 ]
initial
begin
	GR[20] = 1'b0;
end 
// GR[ 19 ]
initial
begin
	GR[19] = 1'b0;
end 
// GR[ 18 ]
initial
begin
	GR[18] = 1'b0;
end 
// GR[ 17 ]
initial
begin
	GR[17] = 1'b0;
end 
// GR[ 16 ]
initial
begin
	GR[16] = 1'b0;
end 
// GR[ 15 ]
initial
begin
	GR[15] = 1'b0;
end 
// GR[ 14 ]
initial
begin
	GR[14] = 1'b0;
end 
// GR[ 13 ]
initial
begin
	GR[13] = 1'b0;
end 
// GR[ 12 ]
initial
begin
	GR[12] = 1'b0;
end 
// GR[ 11 ]
initial
begin
	GR[11] = 1'b0;
end 
// GR[ 10 ]
initial
begin
	GR[10] = 1'b0;
end 
// GR[ 9 ]
initial
begin
	GR[9] = 1'b0;
end 
// GR[ 8 ]
initial
begin
	GR[8] = 1'b0;
end 
// GR[ 7 ]
initial
begin
	GR[7] = 1'b0;
end 
// GR[ 6 ]
initial
begin
	GR[6] = 1'b0;
end 
// GR[ 5 ]
initial
begin
	GR[5] = 1'b0;
end 
// GR[ 4 ]
initial
begin
	GR[4] = 1'b0;
end 
// GR[ 3 ]
initial
begin
	GR[3] = 1'b0;
end 
// GR[ 2 ]
initial
begin
	GR[2] = 1'b0;
end 
// GR[ 1 ]
initial
begin
	GR[1] = 1'b0;
end 
// GR[ 0 ]
initial
begin
	GR[0] = 1'b0;
end 
// RR2[ 4 ]
initial
begin
	RR2[4] = 1'b0;
end 
// RR2[ 3 ]
initial
begin
	RR2[3] = 1'b0;
end 
// RR2[ 2 ]
initial
begin
	RR2[2] = 1'b0;
end 
// RR2[ 1 ]
initial
begin
	RR2[1] = 1'b0;
end 
// RR2[ 0 ]
initial
begin
	RR2[0] = 1'b0;
end 
// RR1[ 4 ]
initial
begin
	RR1[4] = 1'b0;
end 
// RR1[ 3 ]
initial
begin
	RR1[3] = 1'b0;
end 
// RR1[ 2 ]
initial
begin
	RR1[2] = 1'b0;
end 
// RR1[ 1 ]
initial
begin
	RR1[1] = 1'b0;
end 
// RR1[ 0 ]
initial
begin
	RR1[0] = 1'b0;
end 
// WR[ 4 ]
initial
begin
	WR[4] = 1'b0;
end 
// WR[ 3 ]
initial
begin
	WR[3] = 1'b0;
end 
// WR[ 2 ]
initial
begin
	WR[2] = 1'b0;
end 
// WR[ 1 ]
initial
begin
	WR[1] = 1'b0;
end 
// WR[ 0 ]
initial
begin
	WR[0] = 1'b0;
end 
endmodule

