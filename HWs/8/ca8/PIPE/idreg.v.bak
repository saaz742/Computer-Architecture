module EX_MEM_Stage_Reg (
	input clk,
	input EX_Flush,
	input RegWrite_in, MemtoReg_in,
	input ALU_zero_in,
	input Branch_in, MemRead_in, MemWrite_in, Jump_in,
	output RegWrite_out, MemtoReg_out,
	input [31:0] jump_addr_in, branch_addr_in,
	output Branch_out, MemRead_out, MemWrite_out, Jump_out,
	output [31:0] jump_addr_out, branch_addr_out,	
	output ALU_zero_out,
	
	output [31:0] ALU_result_out, reg_read_data_2_out,
	input [4:0] ID_EX_RegisterRd_in,
	output [4:0] EX_MEM_RegisterRd_out
	);
	// general signal
	// reset: async; set all register content to 0
	

	reg RegWrite_out, MemtoReg_out;
	reg Branch_out, MemRead_out, MemWrite_out, Jump_out;
	reg [31:0] jump_addr_out, branch_addr_out;
	reg ALU_zero_out;
	reg [31:0] ALU_result_out, reg_read_data_2_out;
	reg [4:0] EX_MEM_RegisterRd_out;

	always @(posedge clk )begin
		  RegWrite_out <= RegWrite_in;
		  MemtoReg_out <= MemtoReg_in;
		  Branch_out <= Branch_in;
		  MemRead_out <= MemRead_in;
		  MemWrite_out <= MemWrite_in;
		  Jump_out <= Jump_in;
		  jump_addr_out <= jump_addr_in;
		  branch_addr_out <= branch_addr_in;
		  ALU_zero_out <= ALU_zero_in;
		  ALU_result_out <= ALU_result_in;
		  reg_read_data_2_out <= reg_read_data_2_in;
		  EX_MEM_RegisterRd_out <= ID_EX_RegisterRd_in;
	end

endmodule
