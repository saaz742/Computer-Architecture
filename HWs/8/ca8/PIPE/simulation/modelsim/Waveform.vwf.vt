// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2021 16:22:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ca5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ca5_vlg_sample_tst(
	A,
	B,
	C,
	CLK,
	GRD,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
input [2:0] C;
input  CLK;
input [31:0] GRD;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or CLK or GRD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ca5_vlg_check_tst (
	OUT,
	OVERFLOW,
	ZERO,
	sampler_rx
);
input [31:0] OUT;
input  OVERFLOW;
input  ZERO;
input sampler_rx;

reg [31:0] OUT_expected;
reg  OVERFLOW_expected;
reg  ZERO_expected;

reg [31:0] OUT_prev;
reg  OVERFLOW_prev;
reg  ZERO_prev;

reg [31:0] OUT_expected_prev;
reg  OVERFLOW_expected_prev;
reg  ZERO_expected_prev;

reg [31:0] last_OUT_exp;
reg  last_OVERFLOW_exp;
reg  last_ZERO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_prev = OUT;
	OVERFLOW_prev = OVERFLOW;
	ZERO_prev = ZERO;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_expected_prev = OUT_expected;
	OVERFLOW_expected_prev = OVERFLOW_expected;
	ZERO_expected_prev = ZERO_expected;
end


// expected OUT[ 31 ]
initial
begin
	OUT_expected[31] = 1'bX;
end 
// expected OUT[ 30 ]
initial
begin
	OUT_expected[30] = 1'bX;
end 
// expected OUT[ 29 ]
initial
begin
	OUT_expected[29] = 1'bX;
end 
// expected OUT[ 28 ]
initial
begin
	OUT_expected[28] = 1'bX;
end 
// expected OUT[ 27 ]
initial
begin
	OUT_expected[27] = 1'bX;
end 
// expected OUT[ 26 ]
initial
begin
	OUT_expected[26] = 1'bX;
end 
// expected OUT[ 25 ]
initial
begin
	OUT_expected[25] = 1'bX;
end 
// expected OUT[ 24 ]
initial
begin
	OUT_expected[24] = 1'bX;
end 
// expected OUT[ 23 ]
initial
begin
	OUT_expected[23] = 1'bX;
end 
// expected OUT[ 22 ]
initial
begin
	OUT_expected[22] = 1'bX;
end 
// expected OUT[ 21 ]
initial
begin
	OUT_expected[21] = 1'bX;
end 
// expected OUT[ 20 ]
initial
begin
	OUT_expected[20] = 1'bX;
end 
// expected OUT[ 19 ]
initial
begin
	OUT_expected[19] = 1'bX;
end 
// expected OUT[ 18 ]
initial
begin
	OUT_expected[18] = 1'bX;
end 
// expected OUT[ 17 ]
initial
begin
	OUT_expected[17] = 1'bX;
end 
// expected OUT[ 16 ]
initial
begin
	OUT_expected[16] = 1'bX;
end 
// expected OUT[ 15 ]
initial
begin
	OUT_expected[15] = 1'bX;
end 
// expected OUT[ 14 ]
initial
begin
	OUT_expected[14] = 1'bX;
end 
// expected OUT[ 13 ]
initial
begin
	OUT_expected[13] = 1'bX;
end 
// expected OUT[ 12 ]
initial
begin
	OUT_expected[12] = 1'bX;
end 
// expected OUT[ 11 ]
initial
begin
	OUT_expected[11] = 1'bX;
end 
// expected OUT[ 10 ]
initial
begin
	OUT_expected[10] = 1'bX;
end 
// expected OUT[ 9 ]
initial
begin
	OUT_expected[9] = 1'bX;
end 
// expected OUT[ 8 ]
initial
begin
	OUT_expected[8] = 1'bX;
end 
// expected OUT[ 7 ]
initial
begin
	OUT_expected[7] = 1'bX;
end 
// expected OUT[ 6 ]
initial
begin
	OUT_expected[6] = 1'bX;
end 
// expected OUT[ 5 ]
initial
begin
	OUT_expected[5] = 1'bX;
end 
// expected OUT[ 4 ]
initial
begin
	OUT_expected[4] = 1'bX;
end 
// expected OUT[ 3 ]
initial
begin
	OUT_expected[3] = 1'bX;
end 
// expected OUT[ 2 ]
initial
begin
	OUT_expected[2] = 1'bX;
end 
// expected OUT[ 1 ]
initial
begin
	OUT_expected[1] = 1'bX;
end 
// expected OUT[ 0 ]
initial
begin
	OUT_expected[0] = 1'bX;
end 

// expected OVERFLOW
initial
begin
	OVERFLOW_expected = 1'bX;
end 

// expected ZERO
initial
begin
	ZERO_expected = 1'bX;
end 
// generate trigger
always @(OUT_expected or OUT or OVERFLOW_expected or OVERFLOW or ZERO_expected or ZERO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT = %b | expected OVERFLOW = %b | expected ZERO = %b | ",OUT_expected_prev,OVERFLOW_expected_prev,ZERO_expected_prev);
	$display("| real OUT = %b | real OVERFLOW = %b | real ZERO = %b | ",OUT_prev,OVERFLOW_prev,ZERO_prev);
`endif
	if (
		( OUT_expected_prev[0] !== 1'bx ) && ( OUT_prev[0] !== OUT_expected_prev[0] )
		&& ((OUT_expected_prev[0] !== last_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[0] = OUT_expected_prev[0];
	end
	if (
		( OUT_expected_prev[1] !== 1'bx ) && ( OUT_prev[1] !== OUT_expected_prev[1] )
		&& ((OUT_expected_prev[1] !== last_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[1] = OUT_expected_prev[1];
	end
	if (
		( OUT_expected_prev[2] !== 1'bx ) && ( OUT_prev[2] !== OUT_expected_prev[2] )
		&& ((OUT_expected_prev[2] !== last_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[2] = OUT_expected_prev[2];
	end
	if (
		( OUT_expected_prev[3] !== 1'bx ) && ( OUT_prev[3] !== OUT_expected_prev[3] )
		&& ((OUT_expected_prev[3] !== last_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[3] = OUT_expected_prev[3];
	end
	if (
		( OUT_expected_prev[4] !== 1'bx ) && ( OUT_prev[4] !== OUT_expected_prev[4] )
		&& ((OUT_expected_prev[4] !== last_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[4] = OUT_expected_prev[4];
	end
	if (
		( OUT_expected_prev[5] !== 1'bx ) && ( OUT_prev[5] !== OUT_expected_prev[5] )
		&& ((OUT_expected_prev[5] !== last_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[5] = OUT_expected_prev[5];
	end
	if (
		( OUT_expected_prev[6] !== 1'bx ) && ( OUT_prev[6] !== OUT_expected_prev[6] )
		&& ((OUT_expected_prev[6] !== last_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[6] = OUT_expected_prev[6];
	end
	if (
		( OUT_expected_prev[7] !== 1'bx ) && ( OUT_prev[7] !== OUT_expected_prev[7] )
		&& ((OUT_expected_prev[7] !== last_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[7] = OUT_expected_prev[7];
	end
	if (
		( OUT_expected_prev[8] !== 1'bx ) && ( OUT_prev[8] !== OUT_expected_prev[8] )
		&& ((OUT_expected_prev[8] !== last_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[8] = OUT_expected_prev[8];
	end
	if (
		( OUT_expected_prev[9] !== 1'bx ) && ( OUT_prev[9] !== OUT_expected_prev[9] )
		&& ((OUT_expected_prev[9] !== last_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[9] = OUT_expected_prev[9];
	end
	if (
		( OUT_expected_prev[10] !== 1'bx ) && ( OUT_prev[10] !== OUT_expected_prev[10] )
		&& ((OUT_expected_prev[10] !== last_OUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[10] = OUT_expected_prev[10];
	end
	if (
		( OUT_expected_prev[11] !== 1'bx ) && ( OUT_prev[11] !== OUT_expected_prev[11] )
		&& ((OUT_expected_prev[11] !== last_OUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[11] = OUT_expected_prev[11];
	end
	if (
		( OUT_expected_prev[12] !== 1'bx ) && ( OUT_prev[12] !== OUT_expected_prev[12] )
		&& ((OUT_expected_prev[12] !== last_OUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[12] = OUT_expected_prev[12];
	end
	if (
		( OUT_expected_prev[13] !== 1'bx ) && ( OUT_prev[13] !== OUT_expected_prev[13] )
		&& ((OUT_expected_prev[13] !== last_OUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[13] = OUT_expected_prev[13];
	end
	if (
		( OUT_expected_prev[14] !== 1'bx ) && ( OUT_prev[14] !== OUT_expected_prev[14] )
		&& ((OUT_expected_prev[14] !== last_OUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[14] = OUT_expected_prev[14];
	end
	if (
		( OUT_expected_prev[15] !== 1'bx ) && ( OUT_prev[15] !== OUT_expected_prev[15] )
		&& ((OUT_expected_prev[15] !== last_OUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[15] = OUT_expected_prev[15];
	end
	if (
		( OUT_expected_prev[16] !== 1'bx ) && ( OUT_prev[16] !== OUT_expected_prev[16] )
		&& ((OUT_expected_prev[16] !== last_OUT_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[16] = OUT_expected_prev[16];
	end
	if (
		( OUT_expected_prev[17] !== 1'bx ) && ( OUT_prev[17] !== OUT_expected_prev[17] )
		&& ((OUT_expected_prev[17] !== last_OUT_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[17] = OUT_expected_prev[17];
	end
	if (
		( OUT_expected_prev[18] !== 1'bx ) && ( OUT_prev[18] !== OUT_expected_prev[18] )
		&& ((OUT_expected_prev[18] !== last_OUT_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[18] = OUT_expected_prev[18];
	end
	if (
		( OUT_expected_prev[19] !== 1'bx ) && ( OUT_prev[19] !== OUT_expected_prev[19] )
		&& ((OUT_expected_prev[19] !== last_OUT_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[19] = OUT_expected_prev[19];
	end
	if (
		( OUT_expected_prev[20] !== 1'bx ) && ( OUT_prev[20] !== OUT_expected_prev[20] )
		&& ((OUT_expected_prev[20] !== last_OUT_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[20] = OUT_expected_prev[20];
	end
	if (
		( OUT_expected_prev[21] !== 1'bx ) && ( OUT_prev[21] !== OUT_expected_prev[21] )
		&& ((OUT_expected_prev[21] !== last_OUT_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[21] = OUT_expected_prev[21];
	end
	if (
		( OUT_expected_prev[22] !== 1'bx ) && ( OUT_prev[22] !== OUT_expected_prev[22] )
		&& ((OUT_expected_prev[22] !== last_OUT_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[22] = OUT_expected_prev[22];
	end
	if (
		( OUT_expected_prev[23] !== 1'bx ) && ( OUT_prev[23] !== OUT_expected_prev[23] )
		&& ((OUT_expected_prev[23] !== last_OUT_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[23] = OUT_expected_prev[23];
	end
	if (
		( OUT_expected_prev[24] !== 1'bx ) && ( OUT_prev[24] !== OUT_expected_prev[24] )
		&& ((OUT_expected_prev[24] !== last_OUT_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[24] = OUT_expected_prev[24];
	end
	if (
		( OUT_expected_prev[25] !== 1'bx ) && ( OUT_prev[25] !== OUT_expected_prev[25] )
		&& ((OUT_expected_prev[25] !== last_OUT_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[25] = OUT_expected_prev[25];
	end
	if (
		( OUT_expected_prev[26] !== 1'bx ) && ( OUT_prev[26] !== OUT_expected_prev[26] )
		&& ((OUT_expected_prev[26] !== last_OUT_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[26] = OUT_expected_prev[26];
	end
	if (
		( OUT_expected_prev[27] !== 1'bx ) && ( OUT_prev[27] !== OUT_expected_prev[27] )
		&& ((OUT_expected_prev[27] !== last_OUT_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[27] = OUT_expected_prev[27];
	end
	if (
		( OUT_expected_prev[28] !== 1'bx ) && ( OUT_prev[28] !== OUT_expected_prev[28] )
		&& ((OUT_expected_prev[28] !== last_OUT_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[28] = OUT_expected_prev[28];
	end
	if (
		( OUT_expected_prev[29] !== 1'bx ) && ( OUT_prev[29] !== OUT_expected_prev[29] )
		&& ((OUT_expected_prev[29] !== last_OUT_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[29] = OUT_expected_prev[29];
	end
	if (
		( OUT_expected_prev[30] !== 1'bx ) && ( OUT_prev[30] !== OUT_expected_prev[30] )
		&& ((OUT_expected_prev[30] !== last_OUT_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[30] = OUT_expected_prev[30];
	end
	if (
		( OUT_expected_prev[31] !== 1'bx ) && ( OUT_prev[31] !== OUT_expected_prev[31] )
		&& ((OUT_expected_prev[31] !== last_OUT_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_exp[31] = OUT_expected_prev[31];
	end
	if (
		( OVERFLOW_expected_prev !== 1'bx ) && ( OVERFLOW_prev !== OVERFLOW_expected_prev )
		&& ((OVERFLOW_expected_prev !== last_OVERFLOW_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVERFLOW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVERFLOW_expected_prev);
		$display ("     Real value = %b", OVERFLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OVERFLOW_exp = OVERFLOW_expected_prev;
	end
	if (
		( ZERO_expected_prev !== 1'bx ) && ( ZERO_prev !== ZERO_expected_prev )
		&& ((ZERO_expected_prev !== last_ZERO_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZERO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZERO_expected_prev);
		$display ("     Real value = %b", ZERO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ZERO_exp = ZERO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ca5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg [2:0] C;
reg CLK;
reg [31:0] GRD;
// wires                                               
wire [31:0] OUT;
wire OVERFLOW;
wire ZERO;

wire sampler;                             

// assign statements (if any)                          
ca5 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CLK(CLK),
	.GRD(GRD),
	.OUT(OUT),
	.OVERFLOW(OVERFLOW),
	.ZERO(ZERO)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 
// GRD[ 31 ]
initial
begin
	GRD[31] = 1'b0;
end 
// GRD[ 30 ]
initial
begin
	GRD[30] = 1'b0;
end 
// GRD[ 29 ]
initial
begin
	GRD[29] = 1'b0;
end 
// GRD[ 28 ]
initial
begin
	GRD[28] = 1'b0;
end 
// GRD[ 27 ]
initial
begin
	GRD[27] = 1'b0;
end 
// GRD[ 26 ]
initial
begin
	GRD[26] = 1'b0;
end 
// GRD[ 25 ]
initial
begin
	GRD[25] = 1'b0;
end 
// GRD[ 24 ]
initial
begin
	GRD[24] = 1'b0;
end 
// GRD[ 23 ]
initial
begin
	GRD[23] = 1'b0;
end 
// GRD[ 22 ]
initial
begin
	GRD[22] = 1'b0;
end 
// GRD[ 21 ]
initial
begin
	GRD[21] = 1'b0;
end 
// GRD[ 20 ]
initial
begin
	GRD[20] = 1'b0;
end 
// GRD[ 19 ]
initial
begin
	GRD[19] = 1'b0;
end 
// GRD[ 18 ]
initial
begin
	GRD[18] = 1'b0;
end 
// GRD[ 17 ]
initial
begin
	GRD[17] = 1'b0;
end 
// GRD[ 16 ]
initial
begin
	GRD[16] = 1'b0;
end 
// GRD[ 15 ]
initial
begin
	GRD[15] = 1'b0;
end 
// GRD[ 14 ]
initial
begin
	GRD[14] = 1'b0;
end 
// GRD[ 13 ]
initial
begin
	GRD[13] = 1'b0;
end 
// GRD[ 12 ]
initial
begin
	GRD[12] = 1'b0;
end 
// GRD[ 11 ]
initial
begin
	GRD[11] = 1'b0;
end 
// GRD[ 10 ]
initial
begin
	GRD[10] = 1'b0;
end 
// GRD[ 9 ]
initial
begin
	GRD[9] = 1'b0;
end 
// GRD[ 8 ]
initial
begin
	GRD[8] = 1'b0;
end 
// GRD[ 7 ]
initial
begin
	GRD[7] = 1'b0;
end 
// GRD[ 6 ]
initial
begin
	GRD[6] = 1'b0;
end 
// GRD[ 5 ]
initial
begin
	GRD[5] = 1'b0;
end 
// GRD[ 4 ]
initial
begin
	GRD[4] = 1'b0;
end 
// GRD[ 3 ]
initial
begin
	GRD[3] = 1'b0;
end 
// GRD[ 2 ]
initial
begin
	GRD[2] = 1'b0;
end 
// GRD[ 1 ]
initial
begin
	GRD[1] = 1'b0;
end 
// GRD[ 0 ]
initial
begin
	GRD[0] = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b1;
end 

ca5_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.CLK(CLK),
	.GRD(GRD),
	.sampler_tx(sampler)
);

ca5_vlg_check_tst tb_out(
	.OUT(OUT),
	.OVERFLOW(OVERFLOW),
	.ZERO(ZERO),
	.sampler_rx(sampler)
);
endmodule

